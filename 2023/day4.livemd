# AoC 2023 Day 4

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.5"}
])
```

## Input

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"4","session_secret":"AOC_COOKIE_SECRET","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "4", System.fetch_env!("LB_AOC_COOKIE_SECRET"))
```

```elixir
defmodule ScratchCard do
  defstruct [:id, :winning, :has]

  defp parse_numbers(numbers) do
    numbers
    |> String.split(" ", trim: true)
    |> Enum.map(&String.to_integer/1)
    |> MapSet.new()
  end

  defp parse_id("Card" <> rest), do: parse_id(rest)
  defp parse_id(" " <> rest), do: parse_id(rest)
  defp parse_id(id), do: Integer.parse(id)

  def parse("Card " <> line) do
    {id, ":" <> numbers} = parse_id(line)
    [winning, has] = String.split(numbers, "|", trim: true)
    winning = parse_numbers(winning)
    has = parse_numbers(has)

    %ScratchCard{
      id: id,
      winning: winning,
      has: has
    }
  end

  def points(0), do: 0
  def points(1), do: 1

  def points(n) do
    2 * points(n - 1)
  end
end
```

## Part 1

```elixir
puzzle_input
|> String.split("\n")
|> Enum.map(&ScratchCard.parse/1)
|> Enum.map(fn card ->
  MapSet.intersection(card.winning, card.has)
end)
|> Enum.map(&Enum.count/1)
|> Enum.map(&ScratchCard.points/1)
|> Enum.sum()
```

## Part 2

```elixir

```

<!-- livebook:{"offset":1425,"stamp":{"token":"XCP.-AyC7cmqy-0zzeQENkAwISdUaJkmD9BhYquUyKF26CVvGtAqZROnykateGyO89HAAtgpNyu5cUkgSEnnokbmfjzdasFFlqknwuSdquvOyY_XLbF9lEmpezhHTUc","version":2}} -->
