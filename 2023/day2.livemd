# AoC 2023 Day 2

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.5"},
  {:nimble_parsec, "~> 1.4"}
])
```

## Input

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"2","session_secret":"AOC_COOKIE_SECRET","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "2", System.fetch_env!("LB_AOC_COOKIE_SECRET"))
```

## Parsing

```elixir
defmodule CubeGame do
  import NimbleParsec

  defstruct [:id, :sets]

  spacing =
    ignore(optional(string(",")))
    |> ignore(string(" "))

  cube_set =
    spacing
    |> integer(min: 1)
    |> ignore(string(" "))
    |> ascii_string([?a..?z], min: 1)
    |> tag(:cubes)

  game_set =
    times(cube_set, min: 1)
    |> ignore(optional(string(";")))
    |> tag(:set)

  game =
    ignore(string("Game "))
    |> integer(min: 1)
    |> unwrap_and_tag(:id)
    |> ignore(string(":"))
    |> times(game_set, min: 1)
    |> tag(:game)

  games =
    repeat(
      concat(
        game,
        ignore(optional(ascii_char([?\n])))
      )
    )

  defparsecp(:parse, games)

  def parse_input(input) do
    {:ok, games, _, _, _, _} = parse(input)

    games
    |> Enum.map(fn {:game, g} ->
      sets =
        Keyword.get_values(g, :set)
        |> Enum.map(fn s ->
          Keyword.get_values(s, :cubes) |> Enum.map(&List.to_tuple/1)
        end)

      %CubeGame{
        id: g[:id],
        sets: sets
      }
    end)
  end
end
```

```elixir
puzzle_input = """
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
"""
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
games = CubeGame.parse_input(puzzle_input)
```

## Part 1

```elixir
puzzle_input
```

## Part 2

```elixir

```

<!-- livebook:{"offset":2032,"stamp":{"token":"XCP.3NnJfPdfw9cex_4V8ocZIBgYvS195aatiQD5dMrgVxbm5_qqVmhUng9uR2hJ9TcNZEi4SnUbX6W4cdCJhDvEqjDBeIPXrJdfbEFhNaAvSGNchcbkvnr1cBveS5c","version":2}} -->
